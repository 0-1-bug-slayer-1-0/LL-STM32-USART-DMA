
LL_USART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020cc  080020cc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020d4  080020d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080020dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000084  08002160  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08002160  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000532f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010be  00000000  00000000  000253e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  000264a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  00026ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b444  00000000  00000000  00027080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004480  00000000  00000000  000424c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098547  00000000  00000000  00046944  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dee8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b8  00000000  00000000  000def08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002084 	.word	0x08002084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08002084 	.word	0x08002084

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_GetPriorityGrouping+0x18>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	0a1b      	lsrs	r3, r3, #8
 80004e2:	f003 0307 	and.w	r3, r3, #7
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db0b      	blt.n	800051e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 021f 	and.w	r2, r3, #31
 800050c:	4907      	ldr	r1, [pc, #28]	; (800052c <__NVIC_EnableIRQ+0x38>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000e100 	.word	0xe000e100

08000530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0a      	blt.n	800055a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	490c      	ldr	r1, [pc, #48]	; (800057c <__NVIC_SetPriority+0x4c>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	440b      	add	r3, r1
 8000554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000558:	e00a      	b.n	8000570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4908      	ldr	r1, [pc, #32]	; (8000580 <__NVIC_SetPriority+0x50>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	3b04      	subs	r3, #4
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	440b      	add	r3, r1
 800056e:	761a      	strb	r2, [r3, #24]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000e100 	.word	0xe000e100
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	f1c3 0307 	rsb	r3, r3, #7
 800059e:	2b04      	cmp	r3, #4
 80005a0:	bf28      	it	cs
 80005a2:	2304      	movcs	r3, #4
 80005a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3304      	adds	r3, #4
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d902      	bls.n	80005b4 <NVIC_EncodePriority+0x30>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3b03      	subs	r3, #3
 80005b2:	e000      	b.n	80005b6 <NVIC_EncodePriority+0x32>
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43da      	mvns	r2, r3
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43d9      	mvns	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	4313      	orrs	r3, r2
         );
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3724      	adds	r7, #36	; 0x24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	4907      	ldr	r1, [pc, #28]	; (8000618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40023800 	.word	0x40023800

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000620:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000624:	f7ff ffe2 	bl	80005ec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000628:	f7ff ff56 	bl	80004d8 <__NVIC_GetPriorityGrouping>
 800062c:	4603      	mov	r3, r0
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffa6 	bl	8000584 <NVIC_EncodePriority>
 8000638:	4603      	mov	r3, r0
 800063a:	4619      	mov	r1, r3
 800063c:	2010      	movs	r0, #16
 800063e:	f7ff ff77 	bl	8000530 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000642:	2010      	movs	r0, #16
 8000644:	f7ff ff56 	bl	80004f4 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000648:	f7ff ff46 	bl	80004d8 <__NVIC_GetPriorityGrouping>
 800064c:	4603      	mov	r3, r0
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff96 	bl	8000584 <NVIC_EncodePriority>
 8000658:	4603      	mov	r3, r0
 800065a:	4619      	mov	r1, r3
 800065c:	2011      	movs	r0, #17
 800065e:	f7ff ff67 	bl	8000530 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000662:	2011      	movs	r0, #17
 8000664:	f7ff ff46 	bl	80004f4 <__NVIC_EnableIRQ>

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <DMA1_RecieveComplete>:

//---------------------------------------------------------------------------------------------------

/* USER CODE BEGIN 2 */
void DMA1_RecieveComplete(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	fl_rx = 1;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <DMA1_RecieveComplete+0x14>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200000a0 	.word	0x200000a0

08000684 <DMA1_TransmitComplete>:

//---------------------------------------------------------------------------------------------------

void DMA1_TransmitComplete(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	fl_tx = 1;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <DMA1_TransmitComplete+0x14>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	200000a1 	.word	0x200000a1

0800069c <LL_AHB1_GRP1_EnableClock>:
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80006d0:	2080      	movs	r0, #128	; 0x80
 80006d2:	f7ff ffe3 	bl	800069c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ffe0 	bl	800069c <LL_AHB1_GRP1_EnableClock>

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <__NVIC_SetPriorityGrouping>:
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <LL_DMA_DisableStream+0x3c>)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <LL_DMA_DisableStream+0x3c>)
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	440a      	add	r2, r1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4611      	mov	r1, r2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	440a      	add	r2, r1
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	0800209c 	.word	0x0800209c

08000768 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	0800209c 	.word	0x0800209c

08000798 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	2b40      	cmp	r3, #64	; 0x40
 80007aa:	d114      	bne.n	80007d6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <LL_DMA_ConfigAddresses+0x74>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <LL_DMA_ConfigAddresses+0x74>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80007d4:	e013      	b.n	80007fe <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LL_DMA_ConfigAddresses+0x74>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <LL_DMA_ConfigAddresses+0x74>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	60d3      	str	r3, [r2, #12]
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	0800209c 	.word	0x0800209c

08000810 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800081e:	60da      	str	r2, [r3, #12]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800083a:	60da      	str	r2, [r3, #12]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_DMA_ClearFlag_TE5>:
  * @rmtoll HIFCR  CTEIF5    LL_DMA_ClearFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF5);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000856:	60da      	str	r2, [r3, #12]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_DMA_ClearFlag_TE6>:
  * @rmtoll HIFCR  CTEIF6    LL_DMA_ClearFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000872:	60da      	str	r2, [r3, #12]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <LL_DMA_EnableIT_TE+0x3c>)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <LL_DMA_EnableIT_TE+0x3c>)
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	440a      	add	r2, r1
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	4611      	mov	r1, r2
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	440a      	add	r2, r1
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	0800209c 	.word	0x0800209c

080008c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <LL_DMA_EnableIT_TC+0x3c>)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <LL_DMA_EnableIT_TC+0x3c>)
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	440a      	add	r2, r1
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	4611      	mov	r1, r2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	440a      	add	r2, r1
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	0800209c 	.word	0x0800209c

08000900 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <LL_RCC_HSE_Enable+0x1c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <LL_RCC_HSE_Enable+0x1c>)
 800090a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <LL_RCC_HSE_IsReady+0x24>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <LL_RCC_SetSysClkSource+0x24>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 0203 	bic.w	r2, r3, #3
 8000958:	4904      	ldr	r1, [pc, #16]	; (800096c <LL_RCC_SetSysClkSource+0x24>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	608b      	str	r3, [r1, #8]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40023800 	.word	0x40023800

08000970 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <LL_RCC_GetSysClkSource+0x18>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 030c 	and.w	r3, r3, #12
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <LL_RCC_SetAHBPrescaler+0x24>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	608b      	str	r3, [r1, #8]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800

080009b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	608b      	str	r3, [r1, #8]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40023800 	.word	0x40023800

080009dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	608b      	str	r3, [r1, #8]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40023800 	.word	0x40023800

08000a04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_RCC_PLL_Enable+0x1c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LL_RCC_PLL_Enable+0x1c>)
 8000a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <LL_RCC_PLL_IsReady+0x24>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	4311      	orrs	r1, r2
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	0192      	lsls	r2, r2, #6
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a70:	4313      	orrs	r3, r2
 8000a72:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a7c:	4904      	ldr	r1, [pc, #16]	; (8000a90 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40023800 	.word	0x40023800
 8000a94:	ffbf8000 	.word	0xffbf8000

08000a98 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800

08000af8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_FLASH_SetLatency+0x24>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f023 020f 	bic.w	r2, r3, #15
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <LL_FLASH_SetLatency+0x24>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <LL_FLASH_GetLatency+0x18>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 030f 	and.w	r3, r3, #15
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	600b      	str	r3, [r1, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40007000 	.word	0x40007000

08000b64 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	615a      	str	r2, [r3, #20]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	615a      	str	r2, [r3, #20]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3304      	adds	r3, #4
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000bc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bc6:	f7ff ff7f 	bl	8000ac8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000bca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000bce:	f7ff ff63 	bl	8000a98 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f7ff fd84 	bl	80006e0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f876 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f7ff fd76 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f7ff fd1c 	bl	800061c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 fbc0 	bl	8001368 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5); //Прежде чем настраивать каналы их необходимо отключить - ОБЯЗАТЕЛЬНО
 8000be8:	2105      	movs	r1, #5
 8000bea:	4833      	ldr	r0, [pc, #204]	; (8000cb8 <main+0xfc>)
 8000bec:	f7ff fd9c 	bl	8000728 <LL_DMA_DisableStream>
  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8000bf0:	2106      	movs	r1, #6
 8000bf2:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <main+0xfc>)
 8000bf4:	f7ff fd98 	bl	8000728 <LL_DMA_DisableStream>
  //
  LL_DMA_ClearFlag_TC5(DMA1); //Очищаем флаги - это ОБЯЗАТЕЛЬНО
 8000bf8:	482f      	ldr	r0, [pc, #188]	; (8000cb8 <main+0xfc>)
 8000bfa:	f7ff fe09 	bl	8000810 <LL_DMA_ClearFlag_TC5>
  LL_DMA_ClearFlag_TE5(DMA1);
 8000bfe:	482e      	ldr	r0, [pc, #184]	; (8000cb8 <main+0xfc>)
 8000c00:	f7ff fe22 	bl	8000848 <LL_DMA_ClearFlag_TE5>
  LL_DMA_ClearFlag_TC6(DMA1);
 8000c04:	482c      	ldr	r0, [pc, #176]	; (8000cb8 <main+0xfc>)
 8000c06:	f7ff fe11 	bl	800082c <LL_DMA_ClearFlag_TC6>
  LL_DMA_ClearFlag_TE6(DMA1);
 8000c0a:	482b      	ldr	r0, [pc, #172]	; (8000cb8 <main+0xfc>)
 8000c0c:	f7ff fe2a 	bl	8000864 <LL_DMA_ClearFlag_TE6>
  //
  LL_USART_EnableDMAReq_RX(USART2); //Даем добро на запрос DMA USART2 (передача и прием)
 8000c10:	482a      	ldr	r0, [pc, #168]	; (8000cbc <main+0x100>)
 8000c12:	f7ff ffa7 	bl	8000b64 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableDMAReq_TX(USART2);
 8000c16:	4829      	ldr	r0, [pc, #164]	; (8000cbc <main+0x100>)
 8000c18:	f7ff ffb4 	bl	8000b84 <LL_USART_EnableDMAReq_TX>
  //
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_5);
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <main+0xfc>)
 8000c20:	f7ff fe4e 	bl	80008c0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_STREAM_5);
 8000c24:	2105      	movs	r1, #5
 8000c26:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <main+0xfc>)
 8000c28:	f7ff fe2a 	bl	8000880 <LL_DMA_EnableIT_TE>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 8000c2c:	2106      	movs	r1, #6
 8000c2e:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <main+0xfc>)
 8000c30:	f7ff fe46 	bl	80008c0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_STREAM_6);
 8000c34:	2106      	movs	r1, #6
 8000c36:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <main+0xfc>)
 8000c38:	f7ff fe22 	bl	8000880 <LL_DMA_EnableIT_TE>
  //
  //LL_DMA_ClearFlag_GI5(DMA1);
  //LL_DMA_ClearFlag_GI6(DMA1);
  LL_DMA_ClearFlag_TC5(DMA1); //Очищаем флаги - это ОБЯЗАТЕЛЬНО
 8000c3c:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <main+0xfc>)
 8000c3e:	f7ff fde7 	bl	8000810 <LL_DMA_ClearFlag_TC5>
  LL_DMA_ClearFlag_TE5(DMA1);
 8000c42:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <main+0xfc>)
 8000c44:	f7ff fe00 	bl	8000848 <LL_DMA_ClearFlag_TE5>
  LL_DMA_ClearFlag_TC6(DMA1);
 8000c48:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <main+0xfc>)
 8000c4a:	f7ff fdef 	bl	800082c <LL_DMA_ClearFlag_TC6>
  LL_DMA_ClearFlag_TE6(DMA1);
 8000c4e:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <main+0xfc>)
 8000c50:	f7ff fe08 	bl	8000864 <LL_DMA_ClearFlag_TE6>
  //
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_5, LL_USART_DMA_GetRegAddr(USART2), (uint32_t)&rx_str, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_STREAM_5));
 8000c54:	4819      	ldr	r0, [pc, #100]	; (8000cbc <main+0x100>)
 8000c56:	f7ff ffa5 	bl	8000ba4 <LL_USART_DMA_GetRegAddr>
 8000c5a:	4605      	mov	r5, r0
 8000c5c:	4c18      	ldr	r4, [pc, #96]	; (8000cc0 <main+0x104>)
 8000c5e:	2105      	movs	r1, #5
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <main+0xfc>)
 8000c62:	f7ff fd81 	bl	8000768 <LL_DMA_GetDataTransferDirection>
 8000c66:	4603      	mov	r3, r0
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	462a      	mov	r2, r5
 8000c6e:	2105      	movs	r1, #5
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <main+0xfc>)
 8000c72:	f7ff fd91 	bl	8000798 <LL_DMA_ConfigAddresses>
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_6, (uint32_t)&tx_str, LL_USART_DMA_GetRegAddr(USART2), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_STREAM_6));
 8000c76:	4c13      	ldr	r4, [pc, #76]	; (8000cc4 <main+0x108>)
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <main+0x100>)
 8000c7a:	f7ff ff93 	bl	8000ba4 <LL_USART_DMA_GetRegAddr>
 8000c7e:	4605      	mov	r5, r0
 8000c80:	2106      	movs	r1, #6
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <main+0xfc>)
 8000c84:	f7ff fd70 	bl	8000768 <LL_DMA_GetDataTransferDirection>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462b      	mov	r3, r5
 8000c8e:	4622      	mov	r2, r4
 8000c90:	2106      	movs	r1, #6
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <main+0xfc>)
 8000c94:	f7ff fd80 	bl	8000798 <LL_DMA_ConfigAddresses>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  USART_BufferRecieve(rx_str, 256);
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <main+0x104>)
 8000c9e:	f000 fc35 	bl	800150c <USART_BufferRecieve>
	  USART_BufferTransmit((uint8_t *)tx_str, strlen(tx_str));
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <main+0x108>)
 8000ca4:	f7ff fa90 	bl	80001c8 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <main+0x108>)
 8000cb0:	f000 fc08 	bl	80014c4 <USART_BufferTransmit>
	  USART_BufferRecieve(rx_str, 256);
 8000cb4:	e7f0      	b.n	8000c98 <main+0xdc>
 8000cb6:	bf00      	nop
 8000cb8:	40026000 	.word	0x40026000
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	200000a4 	.word	0x200000a4
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f7ff ff13 	bl	8000af8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ff24 	bl	8000b20 <LL_FLASH_GetLatency>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d1fa      	bne.n	8000cd4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000cde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ce2:	f7ff ff2b 	bl	8000b3c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000ce6:	f7ff fe0b 	bl	8000900 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000cea:	bf00      	nop
 8000cec:	f7ff fe18 	bl	8000920 <LL_RCC_HSE_IsReady>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d1fa      	bne.n	8000cec <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	22a8      	movs	r2, #168	; 0xa8
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d00:	f7ff fea4 	bl	8000a4c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d04:	f7ff fe7e 	bl	8000a04 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d08:	bf00      	nop
 8000d0a:	f7ff fe8b 	bl	8000a24 <LL_RCC_PLL_IsReady>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d1fa      	bne.n	8000d0a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fe39 	bl	800098c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000d1a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d1e:	f7ff fe49 	bl	80009b4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000d22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d26:	f7ff fe59 	bl	80009dc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff fe0c 	bl	8000948 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d30:	bf00      	nop
 8000d32:	f7ff fe1d 	bl	8000970 <LL_RCC_GetSysClkSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d1fa      	bne.n	8000d32 <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <SystemClock_Config+0x84>)
 8000d3e:	f001 f95f 	bl	8002000 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <SystemClock_Config+0x84>)
 8000d44:	f001 f96a 	bl	800201c <LL_SetSystemCoreClock>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	0a037a00 	.word	0x0a037a00

08000d50 <LL_DMA_DisableStream>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <LL_DMA_DisableStream+0x3c>)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <LL_DMA_DisableStream+0x3c>)
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	440a      	add	r2, r1
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	4611      	mov	r1, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	440a      	add	r2, r1
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	080020a4 	.word	0x080020a4

08000d90 <LL_DMA_IsActiveFlag_TC5>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da4:	bf0c      	ite	eq
 8000da6:	2301      	moveq	r3, #1
 8000da8:	2300      	movne	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_DMA_IsActiveFlag_TC6>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dcc:	bf0c      	ite	eq
 8000dce:	2301      	moveq	r3, #1
 8000dd0:	2300      	movne	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_DMA_IsActiveFlag_TE5>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_DMA_IsActiveFlag_TE6>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_DMA_ClearFlag_TC5>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_DMA_ClearFlag_TC6>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e5a:	60da      	str	r2, [r3, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1))						//Если передача прошла успешно поднимается флаг успешной передачи
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <DMA1_Stream5_IRQHandler+0x3c>)
 8000ece:	f7ff ff5f 	bl	8000d90 <LL_DMA_IsActiveFlag_TC5>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <DMA1_Stream5_IRQHandler+0x1c>
	{
		LL_DMA_ClearFlag_TC5(DMA1);							//Обнуляем флаг успешной передачи
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <DMA1_Stream5_IRQHandler+0x3c>)
 8000eda:	f7ff ffa9 	bl	8000e30 <LL_DMA_ClearFlag_TC5>
		DMA1_RecieveComplete();
 8000ede:	f7ff fbc5 	bl	800066c <DMA1_RecieveComplete>
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ee2:	e00d      	b.n	8000f00 <DMA1_Stream5_IRQHandler+0x38>
	else if(LL_DMA_IsActiveFlag_TE5(DMA1))					//Если возникла ошибка, то выключаем каналы
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <DMA1_Stream5_IRQHandler+0x3c>)
 8000ee6:	f7ff ff7b 	bl	8000de0 <LL_DMA_IsActiveFlag_TE5>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <DMA1_Stream5_IRQHandler+0x38>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <DMA1_Stream5_IRQHandler+0x3c>)
 8000ef4:	f7ff ff2c 	bl	8000d50 <LL_DMA_DisableStream>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8000ef8:	2106      	movs	r1, #6
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA1_Stream5_IRQHandler+0x3c>)
 8000efc:	f7ff ff28 	bl	8000d50 <LL_DMA_DisableStream>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40026000 	.word	0x40026000

08000f08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <DMA1_Stream6_IRQHandler+0x3c>)
 8000f0e:	f7ff ff53 	bl	8000db8 <LL_DMA_IsActiveFlag_TC6>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <DMA1_Stream6_IRQHandler+0x1c>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <DMA1_Stream6_IRQHandler+0x3c>)
 8000f1a:	f7ff ff97 	bl	8000e4c <LL_DMA_ClearFlag_TC6>
		DMA1_TransmitComplete();
 8000f1e:	f7ff fbb1 	bl	8000684 <DMA1_TransmitComplete>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f22:	e00d      	b.n	8000f40 <DMA1_Stream6_IRQHandler+0x38>
	else if(LL_DMA_IsActiveFlag_TE6(DMA1))
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <DMA1_Stream6_IRQHandler+0x3c>)
 8000f26:	f7ff ff6f 	bl	8000e08 <LL_DMA_IsActiveFlag_TE6>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <DMA1_Stream6_IRQHandler+0x38>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8000f30:	2105      	movs	r1, #5
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <DMA1_Stream6_IRQHandler+0x3c>)
 8000f34:	f7ff ff0c 	bl	8000d50 <LL_DMA_DisableStream>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8000f38:	2106      	movs	r1, #6
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA1_Stream6_IRQHandler+0x3c>)
 8000f3c:	f7ff ff08 	bl	8000d50 <LL_DMA_DisableStream>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40026000 	.word	0x40026000

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <SystemInit+0x28>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <SystemInit+0x28>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SystemInit+0x28>)
 8000f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f62:	609a      	str	r2, [r3, #8]
#endif
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <LL_DMA_EnableStream>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <LL_DMA_EnableStream+0x3c>)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <LL_DMA_EnableStream+0x3c>)
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	440a      	add	r2, r1
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	440a      	add	r2, r1
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	080020c4 	.word	0x080020c4

08000fb4 <LL_DMA_DisableStream>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LL_DMA_DisableStream+0x3c>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <LL_DMA_DisableStream+0x3c>)
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	440a      	add	r2, r1
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	440a      	add	r2, r1
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	080020c4 	.word	0x080020c4

08000ff4 <LL_DMA_SetDataTransferDirection>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LL_DMA_SetDataTransferDirection+0x44>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <LL_DMA_SetDataTransferDirection+0x44>)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	440b      	add	r3, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	440b      	add	r3, r1
 8001022:	4619      	mov	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	080020c4 	.word	0x080020c4

0800103c <LL_DMA_SetMode>:
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LL_DMA_SetMode+0x44>)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <LL_DMA_SetMode+0x44>)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	440b      	add	r3, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	440b      	add	r3, r1
 800106a:	4619      	mov	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	080020c4 	.word	0x080020c4

08001084 <LL_DMA_SetPeriphIncMode>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010a4:	4908      	ldr	r1, [pc, #32]	; (80010c8 <LL_DMA_SetPeriphIncMode+0x44>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	440b      	add	r3, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	440b      	add	r3, r1
 80010b2:	4619      	mov	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	080020c4 	.word	0x080020c4

080010cc <LL_DMA_SetMemoryIncMode>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LL_DMA_SetMemoryIncMode+0x44>)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010ec:	4908      	ldr	r1, [pc, #32]	; (8001110 <LL_DMA_SetMemoryIncMode+0x44>)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	440b      	add	r3, r1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	440b      	add	r3, r1
 80010fa:	4619      	mov	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	080020c4 	.word	0x080020c4

08001114 <LL_DMA_SetPeriphSize>:
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LL_DMA_SetPeriphSize+0x44>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <LL_DMA_SetPeriphSize+0x44>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	440b      	add	r3, r1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	440b      	add	r3, r1
 8001142:	4619      	mov	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	080020c4 	.word	0x080020c4

0800115c <LL_DMA_SetMemorySize>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LL_DMA_SetMemorySize+0x44>)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800117c:	4908      	ldr	r1, [pc, #32]	; (80011a0 <LL_DMA_SetMemorySize+0x44>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	440b      	add	r3, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	440b      	add	r3, r1
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	080020c4 	.word	0x080020c4

080011a4 <LL_DMA_SetStreamPriorityLevel>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011c4:	4908      	ldr	r1, [pc, #32]	; (80011e8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	440b      	add	r3, r1
 80011d2:	4619      	mov	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	080020c4 	.word	0x080020c4

080011ec <LL_DMA_SetDataLength>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LL_DMA_SetDataLength+0x44>)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	4908      	ldr	r1, [pc, #32]	; (8001230 <LL_DMA_SetDataLength+0x44>)
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	440a      	add	r2, r1
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	440a      	add	r2, r1
 800121a:	4611      	mov	r1, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	080020c4 	.word	0x080020c4

08001234 <LL_DMA_SetChannelSelection>:
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LL_DMA_SetChannelSelection+0x44>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <LL_DMA_SetChannelSelection+0x44>)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	440b      	add	r3, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	440b      	add	r3, r1
 8001262:	4619      	mov	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	080020c4 	.word	0x080020c4

0800127c <LL_DMA_DisableFifoMode>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <LL_DMA_DisableFifoMode+0x3c>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <LL_DMA_DisableFifoMode+0x3c>)
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	440a      	add	r2, r1
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	4611      	mov	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	440a      	add	r2, r1
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6153      	str	r3, [r2, #20]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	080020c4 	.word	0x080020c4

080012bc <LL_AHB1_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_APB1_GRP1_EnableClock>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40023800 	.word	0x40023800

0800131c <LL_USART_Enable>:
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_USART_ConfigAsyncMode>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001392:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001396:	f7ff ffa9 	bl	80012ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ff8e 	bl	80012bc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013a0:	230c      	movs	r3, #12
 80013a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013a4:	2302      	movs	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80013b4:	2307      	movs	r3, #7
 80013b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	483e      	ldr	r0, [pc, #248]	; (80014b8 <MX_USART2_UART_Init+0x150>)
 80013be:	f000 f9f7 	bl	80017b0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80013c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c6:	2105      	movs	r1, #5
 80013c8:	483c      	ldr	r0, [pc, #240]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013ca:	f7ff ff33 	bl	8001234 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	483a      	ldr	r0, [pc, #232]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013d4:	f7ff fe0e 	bl	8000ff4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013de:	f7ff fee1 	bl	80011a4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	4835      	ldr	r0, [pc, #212]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013e8:	f7ff fe28 	bl	800103c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2105      	movs	r1, #5
 80013f0:	4832      	ldr	r0, [pc, #200]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013f2:	f7ff fe47 	bl	8001084 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80013f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fa:	2105      	movs	r1, #5
 80013fc:	482f      	ldr	r0, [pc, #188]	; (80014bc <MX_USART2_UART_Init+0x154>)
 80013fe:	f7ff fe65 	bl	80010cc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	482d      	ldr	r0, [pc, #180]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001408:	f7ff fe84 	bl	8001114 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 800140c:	2200      	movs	r2, #0
 800140e:	2105      	movs	r1, #5
 8001410:	482a      	ldr	r0, [pc, #168]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001412:	f7ff fea3 	bl	800115c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001416:	2105      	movs	r1, #5
 8001418:	4828      	ldr	r0, [pc, #160]	; (80014bc <MX_USART2_UART_Init+0x154>)
 800141a:	f7ff ff2f 	bl	800127c <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800141e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001422:	2106      	movs	r1, #6
 8001424:	4825      	ldr	r0, [pc, #148]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001426:	f7ff ff05 	bl	8001234 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	2106      	movs	r1, #6
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001430:	f7ff fde0 	bl	8000ff4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8001434:	2200      	movs	r2, #0
 8001436:	2106      	movs	r1, #6
 8001438:	4820      	ldr	r0, [pc, #128]	; (80014bc <MX_USART2_UART_Init+0x154>)
 800143a:	f7ff feb3 	bl	80011a4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 800143e:	2200      	movs	r2, #0
 8001440:	2106      	movs	r1, #6
 8001442:	481e      	ldr	r0, [pc, #120]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001444:	f7ff fdfa 	bl	800103c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001448:	2200      	movs	r2, #0
 800144a:	2106      	movs	r1, #6
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <MX_USART2_UART_Init+0x154>)
 800144e:	f7ff fe19 	bl	8001084 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	2106      	movs	r1, #6
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_USART2_UART_Init+0x154>)
 800145a:	f7ff fe37 	bl	80010cc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 800145e:	2200      	movs	r2, #0
 8001460:	2106      	movs	r1, #6
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001464:	f7ff fe56 	bl	8001114 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001468:	2200      	movs	r2, #0
 800146a:	2106      	movs	r1, #6
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_USART2_UART_Init+0x154>)
 800146e:	f7ff fe75 	bl	800115c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001472:	2106      	movs	r1, #6
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x154>)
 8001476:	f7ff ff01 	bl	800127c <LL_DMA_DisableFifoMode>

  USART_InitStruct.BaudRate = 115200;
 800147a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800147e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800148c:	230c      	movs	r3, #12
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x158>)
 80014a0:	f000 fd14 	bl	8001ecc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x158>)
 80014a6:	f7ff ff49 	bl	800133c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x158>)
 80014ac:	f7ff ff36 	bl	800131c <LL_USART_Enable>

}
 80014b0:	bf00      	nop
 80014b2:	3738      	adds	r7, #56	; 0x38
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40026000 	.word	0x40026000
 80014c0:	40004400 	.word	0x40004400

080014c4 <USART_BufferTransmit>:
/* USER CODE BEGIN 1 */
//---------------------------------------------------------------------------------------------
void USART_BufferTransmit(uint8_t *buffer, uint16_t size)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
	LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 80014d0:	2106      	movs	r1, #6
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <USART_BufferTransmit+0x40>)
 80014d4:	f7ff fd6e 	bl	8000fb4 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, size);
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	461a      	mov	r2, r3
 80014dc:	2106      	movs	r1, #6
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <USART_BufferTransmit+0x40>)
 80014e0:	f7ff fe84 	bl	80011ec <LL_DMA_SetDataLength>
	LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80014e4:	2106      	movs	r1, #6
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <USART_BufferTransmit+0x40>)
 80014e8:	f7ff fd44 	bl	8000f74 <LL_DMA_EnableStream>
	while(!(fl_tx)){} //Ждем пока обнулится флаг о завершении передачи
 80014ec:	bf00      	nop
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <USART_BufferTransmit+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0fb      	beq.n	80014ee <USART_BufferTransmit+0x2a>
	fl_tx = 0;
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <USART_BufferTransmit+0x44>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40026000 	.word	0x40026000
 8001508:	200000a1 	.word	0x200000a1

0800150c <USART_BufferRecieve>:
//---------------------------------------------------------------------------------------------
void USART_BufferRecieve(uint8_t *buffer, uint16_t size)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
	LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8001518:	2105      	movs	r1, #5
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <USART_BufferRecieve+0x40>)
 800151c:	f7ff fd4a 	bl	8000fb4 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_5, size);
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	461a      	mov	r2, r3
 8001524:	2105      	movs	r1, #5
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <USART_BufferRecieve+0x40>)
 8001528:	f7ff fe60 	bl	80011ec <LL_DMA_SetDataLength>
	LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_5);
 800152c:	2105      	movs	r1, #5
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <USART_BufferRecieve+0x40>)
 8001530:	f7ff fd20 	bl	8000f74 <LL_DMA_EnableStream>
	while(!(fl_rx)){} //Ждем пока обнулится флаг о завершении передачи
 8001534:	bf00      	nop
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <USART_BufferRecieve+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0fb      	beq.n	8001536 <USART_BufferRecieve+0x2a>
	fl_rx = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <USART_BufferRecieve+0x44>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40026000 	.word	0x40026000
 8001550:	200000a0 	.word	0x200000a0

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001558:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800155a:	e003      	b.n	8001564 <LoopCopyDataInit>

0800155c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800155e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001560:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001562:	3104      	adds	r1, #4

08001564 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001568:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800156a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800156c:	d3f6      	bcc.n	800155c <CopyDataInit>
  ldr  r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001570:	e002      	b.n	8001578 <LoopFillZerobss>

08001572 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001572:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001574:	f842 3b04 	str.w	r3, [r2], #4

08001578 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800157a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800157c:	d3f9      	bcc.n	8001572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800157e:	f7ff fce3 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f000 fd5b 	bl	800203c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fb19 	bl	8000bbc <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001590:	080020dc 	.word	0x080020dc
  ldr  r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001598:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800159c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80015a0:	200001a4 	.word	0x200001a4

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>

080015a6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b089      	sub	sp, #36	; 0x24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2103      	movs	r1, #3
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	401a      	ands	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	61bb      	str	r3, [r7, #24]
  return result;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	431a      	orrs	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	613b      	str	r3, [r7, #16]
  return result;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2103      	movs	r1, #3
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	61bb      	str	r3, [r7, #24]
  return result;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001686:	bf00      	nop
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001692:	b480      	push	{r7}
 8001694:	b089      	sub	sp, #36	; 0x24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	613b      	str	r3, [r7, #16]
  return result;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2103      	movs	r1, #3
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	401a      	ands	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	61bb      	str	r3, [r7, #24]
  return result;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	431a      	orrs	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3724      	adds	r7, #36	; 0x24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	613b      	str	r3, [r7, #16]
  return result;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	210f      	movs	r1, #15
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	61bb      	str	r3, [r7, #24]
  return result;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800174e:	b480      	push	{r7}
 8001750:	b089      	sub	sp, #36	; 0x24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	613b      	str	r3, [r7, #16]
  return result;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	210f      	movs	r1, #15
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	61bb      	str	r3, [r7, #24]
  return result;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	431a      	orrs	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80017a4:	bf00      	nop
 80017a6:	3724      	adds	r7, #36	; 0x24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	613b      	str	r3, [r7, #16]
  return result;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80017da:	e050      	b.n	800187e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d042      	beq.n	8001878 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d003      	beq.n	8001802 <LL_GPIO_Init+0x52>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d10d      	bne.n	800181e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	461a      	mov	r2, r3
 8001808:	69b9      	ldr	r1, [r7, #24]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff12 	bl	8001634 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	461a      	mov	r2, r3
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fef3 	bl	8001604 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	461a      	mov	r2, r3
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff33 	bl	8001692 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d11a      	bne.n	800186a <LL_GPIO_Init+0xba>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	60bb      	str	r3, [r7, #8]
  return result;
 8001840:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b07      	cmp	r3, #7
 800184a:	d807      	bhi.n	800185c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	461a      	mov	r2, r3
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff4b 	bl	80016f0 <LL_GPIO_SetAFPin_0_7>
 800185a:	e006      	b.n	800186a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	461a      	mov	r2, r3
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff72 	bl	800174e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	461a      	mov	r2, r3
 8001870:	69b9      	ldr	r1, [r7, #24]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe97 	bl	80015a6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	3301      	adds	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1a7      	bne.n	80017dc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <LL_RCC_GetSysClkSource>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <LL_RCC_GetSysClkSource+0x18>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <LL_RCC_GetAHBPrescaler>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <LL_RCC_GetAHBPrescaler+0x18>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <LL_RCC_GetAPB1Prescaler>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <LL_RCC_GetAPB2Prescaler>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <LL_RCC_GetAPB2Prescaler+0x18>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <LL_RCC_PLL_GetMainSource+0x18>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <LL_RCC_PLL_GetN+0x18>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40023800 	.word	0x40023800

08001940 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <LL_RCC_PLL_GetP+0x18>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <LL_RCC_PLL_GetDivider+0x18>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001980:	f000 f820 	bl	80019c4 <RCC_GetSystemClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f83e 	bl	8001a10 <RCC_GetHCLKClockFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f84c 	bl	8001a3c <RCC_GetPCLK1ClockFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f858 	bl	8001a64 <RCC_GetPCLK2ClockFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60da      	str	r2, [r3, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80019ce:	f7ff ff63 	bl	8001898 <LL_RCC_GetSysClkSource>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d006      	beq.n	80019e6 <RCC_GetSystemClockFreq+0x22>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d007      	beq.n	80019ec <RCC_GetSystemClockFreq+0x28>
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <RCC_GetSystemClockFreq+0x44>)
 80019e2:	607b      	str	r3, [r7, #4]
      break;
 80019e4:	e00a      	b.n	80019fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <RCC_GetSystemClockFreq+0x48>)
 80019e8:	607b      	str	r3, [r7, #4]
      break;
 80019ea:	e007      	b.n	80019fc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80019ec:	2008      	movs	r0, #8
 80019ee:	f000 f84d 	bl	8001a8c <RCC_PLL_GetFreqDomain_SYS>
 80019f2:	6078      	str	r0, [r7, #4]
      break;
 80019f4:	e002      	b.n	80019fc <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <RCC_GetSystemClockFreq+0x44>)
 80019f8:	607b      	str	r3, [r7, #4]
      break;
 80019fa:	bf00      	nop
  }

  return frequency;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001a18:	f7ff ff4c 	bl	80018b4 <LL_RCC_GetAHBPrescaler>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <RCC_GetHCLKClockFreq+0x28>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	40d3      	lsrs	r3, r2
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	080020ac 	.word	0x080020ac

08001a3c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a44:	f7ff ff44 	bl	80018d0 <LL_RCC_GetAPB1Prescaler>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	0a9b      	lsrs	r3, r3, #10
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <RCC_GetPCLK1ClockFreq+0x24>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	40d3      	lsrs	r3, r2
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	080020bc 	.word	0x080020bc

08001a64 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001a6c:	f7ff ff3e 	bl	80018ec <LL_RCC_GetAPB2Prescaler>
 8001a70:	4603      	mov	r3, r0
 8001a72:	0b5b      	lsrs	r3, r3, #13
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <RCC_GetPCLK2ClockFreq+0x24>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	40d3      	lsrs	r3, r2
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	080020bc 	.word	0x080020bc

08001a8c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001aa0:	f7ff ff32 	bl	8001908 <LL_RCC_PLL_GetMainSource>
 8001aa4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab0:	d003      	beq.n	8001aba <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001ab2:	e005      	b.n	8001ac0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ab6:	617b      	str	r3, [r7, #20]
      break;
 8001ab8:	e005      	b.n	8001ac6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001abc:	617b      	str	r3, [r7, #20]
      break;
 8001abe:	e002      	b.n	8001ac6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ac2:	617b      	str	r3, [r7, #20]
      break;
 8001ac4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d113      	bne.n	8001af4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001acc:	f7ff ff46 	bl	800195c <LL_RCC_PLL_GetDivider>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fbb3 f4f2 	udiv	r4, r3, r2
 8001ad8:	f7ff ff24 	bl	8001924 <LL_RCC_PLL_GetN>
 8001adc:	4603      	mov	r3, r0
 8001ade:	fb03 f404 	mul.w	r4, r3, r4
 8001ae2:	f7ff ff2d 	bl	8001940 <LL_RCC_PLL_GetP>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fbb4 f3f3 	udiv	r3, r4, r3
 8001af2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001af4:	693b      	ldr	r3, [r7, #16]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <LL_USART_IsEnabled>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_USART_SetStopBitsLength>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_USART_SetHWFlowCtrl>:
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_USART_SetBaudRate>:
{
 8001b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	f040 80c1 	bne.w	8001d18 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	461d      	mov	r5, r3
 8001b9a:	f04f 0600 	mov.w	r6, #0
 8001b9e:	46a8      	mov	r8, r5
 8001ba0:	46b1      	mov	r9, r6
 8001ba2:	eb18 0308 	adds.w	r3, r8, r8
 8001ba6:	eb49 0409 	adc.w	r4, r9, r9
 8001baa:	4698      	mov	r8, r3
 8001bac:	46a1      	mov	r9, r4
 8001bae:	eb18 0805 	adds.w	r8, r8, r5
 8001bb2:	eb49 0906 	adc.w	r9, r9, r6
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001bca:	4688      	mov	r8, r1
 8001bcc:	4691      	mov	r9, r2
 8001bce:	eb18 0005 	adds.w	r0, r8, r5
 8001bd2:	eb49 0106 	adc.w	r1, r9, r6
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	461d      	mov	r5, r3
 8001bda:	f04f 0600 	mov.w	r6, #0
 8001bde:	196b      	adds	r3, r5, r5
 8001be0:	eb46 0406 	adc.w	r4, r6, r6
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	f7fe faf6 	bl	80001d8 <__aeabi_uldivmod>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4bb5      	ldr	r3, [pc, #724]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	fa1f f883 	uxth.w	r8, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	461d      	mov	r5, r3
 8001c06:	f04f 0600 	mov.w	r6, #0
 8001c0a:	46a9      	mov	r9, r5
 8001c0c:	46b2      	mov	sl, r6
 8001c0e:	eb19 0309 	adds.w	r3, r9, r9
 8001c12:	eb4a 040a 	adc.w	r4, sl, sl
 8001c16:	4699      	mov	r9, r3
 8001c18:	46a2      	mov	sl, r4
 8001c1a:	eb19 0905 	adds.w	r9, r9, r5
 8001c1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001c32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c36:	4689      	mov	r9, r1
 8001c38:	4692      	mov	sl, r2
 8001c3a:	eb19 0005 	adds.w	r0, r9, r5
 8001c3e:	eb4a 0106 	adc.w	r1, sl, r6
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	461d      	mov	r5, r3
 8001c46:	f04f 0600 	mov.w	r6, #0
 8001c4a:	196b      	adds	r3, r5, r5
 8001c4c:	eb46 0406 	adc.w	r4, r6, r6
 8001c50:	461a      	mov	r2, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	f7fe fac0 	bl	80001d8 <__aeabi_uldivmod>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b9a      	ldr	r3, [pc, #616]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001c60:	fba3 1302 	umull	r1, r3, r3, r2
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	2164      	movs	r1, #100	; 0x64
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	3332      	adds	r3, #50	; 0x32
 8001c72:	4a95      	ldr	r2, [pc, #596]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4443      	add	r3, r8
 8001c88:	fa1f f883 	uxth.w	r8, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	461d      	mov	r5, r3
 8001c90:	f04f 0600 	mov.w	r6, #0
 8001c94:	46a9      	mov	r9, r5
 8001c96:	46b2      	mov	sl, r6
 8001c98:	eb19 0309 	adds.w	r3, r9, r9
 8001c9c:	eb4a 040a 	adc.w	r4, sl, sl
 8001ca0:	4699      	mov	r9, r3
 8001ca2:	46a2      	mov	sl, r4
 8001ca4:	eb19 0905 	adds.w	r9, r9, r5
 8001ca8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001cbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001cc0:	4689      	mov	r9, r1
 8001cc2:	4692      	mov	sl, r2
 8001cc4:	eb19 0005 	adds.w	r0, r9, r5
 8001cc8:	eb4a 0106 	adc.w	r1, sl, r6
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	461d      	mov	r5, r3
 8001cd0:	f04f 0600 	mov.w	r6, #0
 8001cd4:	196b      	adds	r3, r5, r5
 8001cd6:	eb46 0406 	adc.w	r4, r6, r6
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	f7fe fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001cea:	fba3 1302 	umull	r1, r3, r3, r2
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2164      	movs	r1, #100	; 0x64
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	3332      	adds	r3, #50	; 0x32
 8001cfc:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4443      	add	r3, r8
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
}
 8001d16:	e0d2      	b.n	8001ebe <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	469a      	mov	sl, r3
 8001d1c:	f04f 0b00 	mov.w	fp, #0
 8001d20:	46d0      	mov	r8, sl
 8001d22:	46d9      	mov	r9, fp
 8001d24:	eb18 0308 	adds.w	r3, r8, r8
 8001d28:	eb49 0409 	adc.w	r4, r9, r9
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	46a1      	mov	r9, r4
 8001d30:	eb18 080a 	adds.w	r8, r8, sl
 8001d34:	eb49 090b 	adc.w	r9, r9, fp
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001d4c:	4688      	mov	r8, r1
 8001d4e:	4691      	mov	r9, r2
 8001d50:	eb1a 0508 	adds.w	r5, sl, r8
 8001d54:	eb4b 0609 	adc.w	r6, fp, r9
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f04f 0400 	mov.w	r4, #0
 8001d68:	0094      	lsls	r4, r2, #2
 8001d6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d6e:	008b      	lsls	r3, r1, #2
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	4628      	mov	r0, r5
 8001d76:	4631      	mov	r1, r6
 8001d78:	f7fe fa2e 	bl	80001d8 <__aeabi_uldivmod>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001d84:	fba3 2302 	umull	r2, r3, r3, r2
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	fa1f f883 	uxth.w	r8, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	469b      	mov	fp, r3
 8001d96:	f04f 0c00 	mov.w	ip, #0
 8001d9a:	46d9      	mov	r9, fp
 8001d9c:	46e2      	mov	sl, ip
 8001d9e:	eb19 0309 	adds.w	r3, r9, r9
 8001da2:	eb4a 040a 	adc.w	r4, sl, sl
 8001da6:	4699      	mov	r9, r3
 8001da8:	46a2      	mov	sl, r4
 8001daa:	eb19 090b 	adds.w	r9, r9, fp
 8001dae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dc6:	4689      	mov	r9, r1
 8001dc8:	4692      	mov	sl, r2
 8001dca:	eb1b 0509 	adds.w	r5, fp, r9
 8001dce:	eb4c 060a 	adc.w	r6, ip, sl
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f04f 0400 	mov.w	r4, #0
 8001de2:	0094      	lsls	r4, r2, #2
 8001de4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001de8:	008b      	lsls	r3, r1, #2
 8001dea:	461a      	mov	r2, r3
 8001dec:	4623      	mov	r3, r4
 8001dee:	4628      	mov	r0, r5
 8001df0:	4631      	mov	r1, r6
 8001df2:	f7fe f9f1 	bl	80001d8 <__aeabi_uldivmod>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2164      	movs	r1, #100	; 0x64
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	3332      	adds	r3, #50	; 0x32
 8001e10:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4443      	add	r3, r8
 8001e22:	fa1f f883 	uxth.w	r8, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	469b      	mov	fp, r3
 8001e2a:	f04f 0c00 	mov.w	ip, #0
 8001e2e:	46d9      	mov	r9, fp
 8001e30:	46e2      	mov	sl, ip
 8001e32:	eb19 0309 	adds.w	r3, r9, r9
 8001e36:	eb4a 040a 	adc.w	r4, sl, sl
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	46a2      	mov	sl, r4
 8001e3e:	eb19 090b 	adds.w	r9, r9, fp
 8001e42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e5a:	4689      	mov	r9, r1
 8001e5c:	4692      	mov	sl, r2
 8001e5e:	eb1b 0509 	adds.w	r5, fp, r9
 8001e62:	eb4c 060a 	adc.w	r6, ip, sl
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	0094      	lsls	r4, r2, #2
 8001e78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e7c:	008b      	lsls	r3, r1, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4623      	mov	r3, r4
 8001e82:	4628      	mov	r0, r5
 8001e84:	4631      	mov	r1, r6
 8001e86:	f7fe f9a7 	bl	80001d8 <__aeabi_uldivmod>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001e92:	fba3 1302 	umull	r1, r3, r3, r2
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2164      	movs	r1, #100	; 0x64
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	3332      	adds	r3, #50	; 0x32
 8001ea4:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <LL_USART_SetBaudRate+0x34c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4443      	add	r3, r8
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec8:	51eb851f 	.word	0x51eb851f

08001ecc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fe12 	bl	8001b08 <LL_USART_IsEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15e      	bne.n	8001fa8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ef2:	f023 030c 	bic.w	r3, r3, #12
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6851      	ldr	r1, [r2, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	4311      	orrs	r1, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6912      	ldr	r2, [r2, #16]
 8001f04:	4311      	orrs	r1, r2
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	6992      	ldr	r2, [r2, #24]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fe09 	bl	8001b30 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fe16 	bl	8001b56 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd22 	bl	8001978 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <LL_USART_Init+0xe8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d102      	bne.n	8001f42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e021      	b.n	8001f86 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <LL_USART_Init+0xec>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d102      	bne.n	8001f50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	e01a      	b.n	8001f86 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <LL_USART_Init+0xf0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d102      	bne.n	8001f5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e013      	b.n	8001f86 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <LL_USART_Init+0xf4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d102      	bne.n	8001f6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e00c      	b.n	8001f86 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <LL_USART_Init+0xf8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d102      	bne.n	8001f7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e005      	b.n	8001f86 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <LL_USART_Init+0xfc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fdea 	bl	8001b7c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	40004800 	.word	0x40004800
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	40004c00 	.word	0x40004c00
 8001fc8:	40005000 	.word	0x40005000

08001fcc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <LL_InitTick+0x30>)
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <LL_InitTick+0x30>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <LL_InitTick+0x30>)
 8001fec:	2205      	movs	r2, #5
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffdd 	bl	8001fcc <LL_InitTick>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <LL_SetSystemCoreClock+0x1c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000080 	.word	0x20000080

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	4e0d      	ldr	r6, [pc, #52]	; (8002074 <__libc_init_array+0x38>)
 8002040:	4c0d      	ldr	r4, [pc, #52]	; (8002078 <__libc_init_array+0x3c>)
 8002042:	1ba4      	subs	r4, r4, r6
 8002044:	10a4      	asrs	r4, r4, #2
 8002046:	2500      	movs	r5, #0
 8002048:	42a5      	cmp	r5, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	4e0b      	ldr	r6, [pc, #44]	; (800207c <__libc_init_array+0x40>)
 800204e:	4c0c      	ldr	r4, [pc, #48]	; (8002080 <__libc_init_array+0x44>)
 8002050:	f000 f818 	bl	8002084 <_init>
 8002054:	1ba4      	subs	r4, r4, r6
 8002056:	10a4      	asrs	r4, r4, #2
 8002058:	2500      	movs	r5, #0
 800205a:	42a5      	cmp	r5, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002064:	4798      	blx	r3
 8002066:	3501      	adds	r5, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800206e:	4798      	blx	r3
 8002070:	3501      	adds	r5, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	080020d4 	.word	0x080020d4
 8002078:	080020d4 	.word	0x080020d4
 800207c:	080020d4 	.word	0x080020d4
 8002080:	080020d8 	.word	0x080020d8

08002084 <_init>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr

08002090 <_fini>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	bf00      	nop
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr
